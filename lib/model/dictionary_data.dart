///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class DictionaryDefinitions {
/*
{
  "type": "noun",
  "definition": "a nocturnal bird of prey with large eyes, a facial disc, a hooked beak, and typically a loud hooting call.",
  "example": "I love reaching out into that absolute silence, when you can hear the owl or the wind.",
  "image_url": "https://media.owlbot.info/dictionary/images/hhhhhhhhhhhhhhhhhhhu.jpg.400x400_q85_box-15,0,209,194_crop_detail.jpg",
  "emoji": "ðŸ¦‰"
}
*/

  late  String type;
  late  String definition;
  late  String example;
  late  String imageUrl;
  late  String emoji;

  DictionaryDefinitions({
    required this.type,
    required this.definition,
    required this.example,
    required this.imageUrl,
    required this.emoji,
  });
  DictionaryDefinitions.fromJson(Map<String, dynamic> json) {
    type = json['type'].toString();
    definition = json['definition'].toString();
    example = json['example'].toString();
    imageUrl = json['image_url'].toString();
    emoji = json['emoji'].toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    data['definition'] = definition;
    data['example'] = example;
    data['image_url'] = imageUrl;
    data['emoji'] = emoji;
    return data;
  }
}

class Dictionary {
/*
{
  "definitions": [
    {
      "type": "noun",
      "definition": "a nocturnal bird of prey with large eyes, a facial disc, a hooked beak, and typically a loud hooting call.",
      "example": "I love reaching out into that absolute silence, when you can hear the owl or the wind.",
      "image_url": "https://media.owlbot.info/dictionary/images/hhhhhhhhhhhhhhhhhhhu.jpg.400x400_q85_box-15,0,209,194_crop_detail.jpg",
      "emoji": "ðŸ¦‰"
    }
  ],
  "word": "owl",
  "pronunciation": "oul"
}
*/

  late  List<DictionaryDefinitions?>  definitions;
  late  String word;
  late  String pronunciation;

  Dictionary({
    required this.definitions,
    required this.word,
    required this.pronunciation,
  });
  Dictionary.fromJson(Map<String, dynamic> json) {
    if (json['definitions'] != null) {
      final v = json['definitions'];
      final arr0 = <DictionaryDefinitions>[];
      v.forEach((v) {
        arr0.add(DictionaryDefinitions.fromJson(v));
      });
      definitions = arr0;
    }
    word = json['word'].toString();
    pronunciation = json['pronunciation'].toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    final v = definitions;
    final arr0 = [];
    for (var v in v) {
      arr0.add(v!.toJson());
    }
    data['definitions'] = arr0;
    data['word'] = word;
    data['pronunciation'] = pronunciation;
    return data;
  }
}
